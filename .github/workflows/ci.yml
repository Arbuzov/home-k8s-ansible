name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: Ansible Lint & Syntax Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible ansible-lint yamllint

    - name: Install Ansible collections
      run: |
        ansible-galaxy collection install -r requirements.yml

    - name: Run ansible-lint
      run: |
        ansible-lint playbooks/ roles/

    - name: Run yamllint
      run: |
        yamllint .

    - name: Syntax check playbooks
      run: |
        ansible-playbook --syntax-check site.yml
        for playbook in playbooks/*.yml; do
          ansible-playbook --syntax-check "$playbook"
        done

  molecule-test:
    name: Molecule Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible molecule molecule-docker docker

    - name: Install Ansible collections
      run: |
        ansible-galaxy collection install -r requirements.yml

    - name: Run Molecule tests
      run: |
        cd tests
        molecule test
      env:
        MOLECULE_NO_LOG: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Test with Kind
    runs-on: ubuntu-latest
    needs: [lint, molecule-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible kubernetes

    - name: Install Ansible collections
      run: |
        ansible-galaxy collection install -r requirements.yml

    - name: Create Kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        config: tests/kind-config.yml
        cluster_name: ansible-test

    - name: Test cluster connectivity
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Create test inventory for Kind
      run: |
        cat > inventory-ci.yml << EOF
        all:
          children:
            masters:
              hosts:
                kind-control-plane:
                  ansible_connection: kubectl
                  ansible_kubectl_context: kind-ansible-test
            workers:
              hosts:
                kind-worker:
                  ansible_connection: kubectl
                  ansible_kubectl_context: kind-ansible-test
                kind-worker2:
                  ansible_connection: kubectl  
                  ansible_kubectl_context: kind-ansible-test
        EOF

    - name: Test playbook dry-run
      run: |
        ansible-playbook playbooks/maintenance.yml -i inventory-ci.yml --check --tags check
      continue-on-error: true

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install ansible ansible-doc-extractor mkdocs mkdocs-material

    - name: Generate role documentation
      run: |
        mkdir -p docs/roles
        for role in roles/*; do
          if [ -d "$role" ]; then
            role_name=$(basename "$role")
            echo "# Role: $role_name" > "docs/roles/$role_name.md"
            if [ -f "$role/README.md" ]; then
              cat "$role/README.md" >> "docs/roles/$role_name.md"
            fi
          fi
        done

    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
