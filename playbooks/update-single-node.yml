---
- name: Update Single Node with Specific Kubernetes Version
  hosts: "{{ target_host | default('all') }}"
  become: yes
  gather_facts: yes
  serial: 1

  pre_tasks:
    - name: Load credentials
      include_vars: credentials.json

    - name: Validate target_host is specified
      fail:
        msg: "Please specify target_host variable: ansible-playbook playbooks/update-single-node.yml -e target_host=pi4-master"
      when: target_host is not defined

    - name: Validate kubernetes_target_version is specified
      fail:
        msg: "Please specify kubernetes_target_version variable: ansible-playbook playbooks/update-single-node.yml -e kubernetes_target_version=1.29"
      when: kubernetes_target_version is not defined

    - name: Display update information
      debug:
        msg: |
          🎯 Updating node: {{ inventory_hostname }}
          📦 Target Kubernetes version: {{ kubernetes_target_version }}
          🔄 Current operation: {{ update_operation | default('upgrade') }}

  tasks:
    - name: Check current Kubernetes version
      shell: kubectl version --client --short 2>/dev/null || echo "Not installed"
      register: current_k8s_version
      ignore_errors: yes

    - name: Display current version
      debug:
        msg: "Current Kubernetes version: {{ current_k8s_version.stdout }}"

    - name: Check if node is master
      set_fact:
        is_master_node: "{{ inventory_hostname in groups['masters'] }}"

    - name: Check if node is worker
      set_fact:
        is_worker_node: "{{ inventory_hostname in groups['workers'] }}"

    - name: Drain node before update (except single master)
      kubernetes.core.k8s_drain:
        name: "{{ ansible_hostname }}"
        force: yes
        delete_emptydir_data: yes
        ignore_daemonsets: yes
        wait_timeout: 600
        disable_eviction: no
      delegate_to: "{{ groups['masters'][0] }}"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when: 
        - is_worker_node or (is_master_node and groups['masters'] | length > 1)
        - drain_node | default(true)

    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        autoclean: yes
      when: update_system_packages | default(true)

    - name: Hold current Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: install
      loop:
        - kubelet
        - kubeadm
        - kubectl
      ignore_errors: yes

    - name: Update Kubernetes packages to specific version
      apt:
        name:
          - "kubelet={{ kubernetes_target_version }}.*"
          - "kubeadm={{ kubernetes_target_version }}.*"
          - "kubectl={{ kubernetes_target_version }}.*"
        state: present
        allow_downgrade: yes
        force: yes

    - name: Hold new Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Restart kubelet service
      systemd:
        name: kubelet
        state: restarted
        daemon_reload: yes

    - name: Wait for kubelet to be ready
      wait_for:
        port: 10250
        host: "{{ ansible_default_ipv4.address }}"
        timeout: 120

    - name: Upgrade master node (kubeadm)
      block:
        - name: Plan kubeadm upgrade
          command: "kubeadm upgrade plan v{{ kubernetes_target_version }}.0"
          register: upgrade_plan
          when: check_upgrade_plan | default(true)

        - name: Display upgrade plan
          debug:
            msg: "{{ upgrade_plan.stdout_lines }}"
          when: upgrade_plan is defined

        - name: Apply kubeadm upgrade
          command: "kubeadm upgrade apply v{{ kubernetes_target_version }}.0 -y"
          register: upgrade_result
          when: apply_upgrade | default(true)

        - name: Display upgrade result
          debug:
            msg: "{{ upgrade_result.stdout_lines }}"
          when: upgrade_result is defined

      when: is_master_node

    - name: Upgrade worker node (kubeadm)
      block:
        - name: Upgrade node configuration
          command: "kubeadm upgrade node"
          register: worker_upgrade_result

        - name: Display worker upgrade result
          debug:
            msg: "{{ worker_upgrade_result.stdout_lines }}"

      when: is_worker_node

    - name: Uncordon node after update
      kubernetes.core.k8s_uncordon:
        name: "{{ ansible_hostname }}"
      delegate_to: "{{ groups['masters'][0] }}"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when: 
        - is_worker_node or (is_master_node and groups['masters'] | length > 1)
        - drain_node | default(true)

    - name: Wait for node to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
        name: "{{ ansible_hostname }}"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300
      delegate_to: "{{ groups['masters'][0] }}"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Verify updated version
      shell: kubectl version --client --short
      register: updated_k8s_version

    - name: Display update results
      debug:
        msg: |
          ✅ Node {{ inventory_hostname }} updated successfully!
          📦 Previous version: {{ current_k8s_version.stdout }}
          📦 Current version: {{ updated_k8s_version.stdout }}
          🎯 Target version: {{ kubernetes_target_version }}

  post_tasks:
    - name: Check cluster health
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: cluster_nodes
      delegate_to: "{{ groups['masters'][0] }}"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Display cluster status
      debug:
        msg: |
          🏥 Cluster Status After Update:
          {% for node in cluster_nodes.resources %}
          - {{ node.metadata.name }}: {{ node.status.conditions | selectattr('type', 'equalto', 'Ready') | map(attribute='status') | first }} ({{ node.status.nodeInfo.kubeletVersion }})
          {% endfor %}
