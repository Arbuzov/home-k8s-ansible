# Очистка старых ключей и keyring
- name: Remove old Kubernetes keyring (if exists)
  ansible.builtin.file:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    state: absent
  ignore_errors: true

- name: Remove old Kubernetes ASCII key (if exists)
  ansible.builtin.file:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    state: absent
  ignore_errors: true

- name: Remove deprecated apt-key from trusted.gpg (if exists)
  ansible.builtin.command: >
    apt-key del 234654DA9A296436
  ignore_errors: true

# BEGIN: Kubernetes install tasks
- name: Ensure /etc/apt/keyrings exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download and install Kubernetes GPG key
  ansible.builtin.shell: >
    curl -fsSL "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_major_minor }}/deb/Release.key" | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_major_minor }}/deb/ /"
    state: present
    update_cache: true

- name: Install Kubernetes packages
  ansible.builtin.apt:
    name:
      - "kubelet={{ kubernetes_version }}-1.1"
      - "kubeadm={{ kubernetes_version }}-1.1"
      - "kubectl={{ kubernetes_version }}-1.1"
    state: present
    allow_downgrade: true

- name: Hold Kubernetes packages
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Configure kubelet
  ansible.builtin.template:
    src: kubelet-config.yml.j2
    dest: /etc/kubernetes/kubelet-config.yml
    backup: true
  notify: restart kubelet

- name: Create kubelet service directory
  ansible.builtin.file:
    path: /etc/systemd/system/kubelet.service.d
    state: directory
    mode: '0755'

- name: Configure kubelet service
  ansible.builtin.copy:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    content: |
      # Note: This dropin only works with kubeadm and kubelet v1.11+
      [Service]
      Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
      Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
      # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
      EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
      # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
      # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
      EnvironmentFile=-/etc/default/kubelet
      ExecStart=
      ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
  notify: restart kubelet

- name: Start and enable kubelet
  ansible.builtin.systemd:
    name: kubelet
    state: started
    enabled: true
    daemon_reload: true

- name: Verify Kubernetes installation
  ansible.builtin.command: kubeadm version
  register: kubeadm_version

- name: Display kubeadm version
  ansible.builtin.debug:
    msg: "kubeadm version: {{ kubeadm_version.stdout }}"
# END: Kubernetes install tasks
